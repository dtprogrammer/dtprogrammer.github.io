<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Programming For Interviews</title><description>Algorithms, Data Structures and System Design for Interviews</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Programming For Interviews</title><link>http://localhost:2368/</link></image><generator>Ghost 1.8</generator><lastBuildDate>Tue, 12 Sep 2017 03:42:17 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>28. Implement strStr()</title><description>&lt;div class="kg-card-markdown"&gt;&lt;h3 id="question"&gt;&lt;a href="https://leetcode.com/problems/implement-strstr/description/"&gt;Question&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Implement strStr().&lt;/p&gt;
&lt;p&gt;Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;p&gt;This problem is pretty simple although I was not able to correctly solve this problem for all test cases in single attempt. The idea here is:&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/28-implement-strstr/</link><guid isPermaLink="false">59b68ab588f7011c428b15a2</guid><category>leetcode</category><dc:creator>Duct Tape Programmer</dc:creator><pubDate>Mon, 11 Sep 2017 13:18:29 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;h3 id="question"&gt;&lt;a href="https://leetcode.com/problems/implement-strstr/description/"&gt;Question&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Implement strStr().&lt;/p&gt;
&lt;p&gt;Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;p&gt;This problem is pretty simple although I was not able to correctly solve this problem for all test cases in single attempt. The idea here is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scan through the haystack for the first character of the needle&lt;/li&gt;
&lt;li&gt;As soon as the first character is found match all the remaining character in the needlle&lt;/li&gt;
&lt;li&gt;If they do then return the index where the first character of needle occurs in the haystack.&lt;/li&gt;
&lt;li&gt;If they don't then return -1&lt;/li&gt;
&lt;li&gt;Note: For empty strings &amp;quot;&amp;quot; leetcode test cases expect to return 0. This is where my initial solution was failing as I was returning -1. I tried to have some initial checks for empty string and return early although if out of two string only one is empty then you need to return -1 and not 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;script src="https://gist-it.appspot.com/github/dtprogrammer/leetcode-solutions/blob/master/src/main/java/dtprogrammer/github/io/p28/Solution.java"&gt;&lt;/script&gt;
&lt;h4 id="timecomplexity"&gt;Time complexity&lt;/h4&gt;
&lt;p&gt;Sine we scan the whole haystack for the first character of needle and then match remaining character it is very possible that in worse case we will run in O (m * n).&lt;/p&gt;
&lt;h3 id="spacecomplexity"&gt;Space complexity&lt;/h3&gt;
&lt;p&gt;Constant&lt;/p&gt;
&lt;h3 id="notes"&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;i and j together are used to index the haystack.&lt;/li&gt;
&lt;li&gt;The time complexity can be improved to O(m) where m is the size of haystack by using some intuitve algorithms like Rabin-Karp or KMP algorithms.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content:encoded></item><item><title>20. Valid Parentheses</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.&lt;/p&gt;
&lt;p&gt;The brackets must close in the correct order, &amp;quot;()&amp;quot; and &amp;quot;()[]{}&amp;quot; are all valid but &amp;quot;(]&amp;quot; and &amp;quot;([)]&amp;quot; are&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/20-valid-parentheses/</link><guid isPermaLink="false">59b58772f23bc812fffcdbc1</guid><category>leetcode</category><dc:creator>Duct Tape Programmer</dc:creator><pubDate>Sun, 10 Sep 2017 18:46:33 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.&lt;/p&gt;
&lt;p&gt;The brackets must close in the correct order, &amp;quot;()&amp;quot; and &amp;quot;()[]{}&amp;quot; are all valid but &amp;quot;(]&amp;quot; and &amp;quot;([)]&amp;quot; are not.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/valid-parentheses/description/"&gt;Question on Leetcode&lt;/a&gt;&lt;/p&gt;
&lt;script src="https://gist-it.appspot.com/github/dtprogrammer/leetcode-solutions/blob/master/src/main/java/dtprogrammer/github/io/p20/Solution.java"&gt;&lt;/script&gt;&lt;/div&gt;</content:encoded></item></channel></rss>